{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Dynamically computes the element styles\n *\n * @param {*} element - element to compute style\n * @param {*} computed - computed output\n */\nconst getComputedStyles = (element, computed) => {\n    let node = element;\n    const computedStyle = window.getComputedStyle(element).cssText;\n\n    if (element.children.length === 0) {\n        node.style.cssText = computedStyle;\n\n        return node;\n    } else {\n        node.style.cssText = computedStyle;\n    }\n    Array.from(node.children).forEach(child => {\n        return getComputedStyles(child, node);\n    });\n\n    return node;\n};\n\n/**\n * Print HTML element with configurable options\n * @param {*} element = element to be printed\n * @param {*} options = configurable print options\n */\nconst tinyPrint = (element, options) => {\n    if (!element.nodeName) {\n        console.warn('Invalid DOM element passed!');\n        return;\n    }\n    const {\n        scanStyles = true,\n        importStyles = [],\n        scanHTML = false,\n        cssStyle = '',\n        hidePageRule = false,\n    } = options;\n    const iframe = document.createElement('iframe');\n    let printElement = element.cloneNode(true);\n    let printContainer = document.querySelector('.tiny-print-container');\n\n    // check if print container exists\n    if (!printContainer) {\n        // create the print container\n        printContainer = document.createElement('div');\n        printContainer.classList.add('tiny-print-container');\n        printContainer.style.cssText = 'width: 100%; height: 100%;';\n        printContainer.style.display = 'none';\n        document.body.appendChild(printContainer);\n    }\n\n    // if scanning is enabled then fetch computed styles\n    if (scanStyles) {\n        printContainer.style.display = 'block';\n        printContainer.appendChild(printElement);\n        printElement = getComputedStyles(printElement);\n        printContainer.style.display = 'none';\n    }\n    const printHTML = printElement.outerHTML;\n\n    // clean the print container\n    printContainer.innerHTML = '';\n    // append print iframe content\n    printContainer.appendChild(iframe);\n    // open iframe content\n    iframe.contentWindow.document.open();\n    iframe.contentWindow.document.write(printHTML);\n\n    const iframeHead = iframe.contentWindow.document.querySelector('head');\n    // scan html then import all available styles then append styles to the head\n    if (scanHTML) {\n        const styles = document.querySelectorAll('style');\n        const links = document.querySelectorAll('link[href$=\".css\"]');\n        // inject styles to iframe head\n        styles.forEach(style => {\n            const node = style.cloneNode(true);\n            iframeHead.appendChild(node);\n        });\n        // inject linked css\n        links.forEach(link => {\n            const node = link.cloneNode(true);\n            iframeHead.appendChild(node);\n        });\n    }\n\n    // import external stylesheet links\n    if (importStyles.length > 0) {\n        importStyles.forEach(url => {\n            const link = document.createElement('link');\n            link.setAttribute('type', 'text/css');\n            link.setAttribute('rel', 'stylesheet');\n            link.setAttribute('href', url);\n            iframeHead.appendChild(link);\n        });\n    }\n\n    // custom css style\n    if (cssStyle) {\n        const customStyleNode = document.createElement('style');\n        customStyleNode.innerHTML = cssStyle;\n        iframeHead.appendChild(customStyleNode);\n    }\n\n    // hide page rule\n    if (hidePageRule) {\n        const pageRuleStyleNode = document.createElement('style');\n        pageRuleStyleNode.innerHTML = '@page { size: auto;  margin: 0mm; }';\n        iframeHead.appendChild(pageRuleStyleNode);\n    }\n\n    iframe.contentWindow.print();\n    iframe.contentWindow.document.close();\n};\n\nexport default tinyPrint;\n"],"names":["const","getComputedStyles","element","computed","node","computedStyle","window","getComputedStyle","cssText","children","length","style","Array","from","forEach","child","options","nodeName","iframe","document","createElement","printElement","cloneNode","printContainer","querySelector","classList","add","display","body","appendChild","scanStyles","printHTML","outerHTML","innerHTML","contentWindow","open","write","iframeHead","scanHTML","styles","querySelectorAll","links","link","importStyles","url","setAttribute","cssStyle","customStyleNode","hidePageRule","pageRuleStyleNode","print","close","console","warn"],"mappings":"AAMAA,IAAMC,WAAqBC,EAASC,OAC5BC,EAAOF,EACLG,EAAgBC,OAAOC,iBAAiBL,GAASM,eAEvB,IAA5BN,EAAQO,SAASC,QACjBN,EAAKO,MAAMH,QAAUH,EAEdD,IAEPA,EAAKO,MAAMH,QAAUH,EAEzBO,MAAMC,KAAKT,EAAKK,UAAUK,iBAAQC,UACvBd,EAAkBc,EAAOX,KAG7BA,4BAQQF,EAASc,MACnBd,EAAQe,6CAKI,uCACE,qCACJ,mCACA,yCACI,OAEbC,EAASC,SAASC,cAAc,UAClCC,EAAenB,EAAQoB,WAAU,GACjCC,EAAiBJ,SAASK,cAAc,yBAGvCD,KAEDA,EAAiBJ,SAASC,cAAc,QACzBK,UAAUC,IAAI,wBAC7BH,EAAeZ,MAAMH,QAAU,6BAC/Be,EAAeZ,MAAMgB,QAAU,OAC/BR,SAASS,KAAKC,YAAYN,IAI1BO,IACAP,EAAeZ,MAAMgB,QAAU,QAC/BJ,EAAeM,YAAYR,GAC3BA,EAAepB,EAAkBoB,GACjCE,EAAeZ,MAAMgB,QAAU,YAE7BI,EAAYV,EAAaW,UAG/BT,EAAeU,UAAY,GAE3BV,EAAeM,YAAYX,GAE3BA,EAAOgB,cAAcf,SAASgB,OAC9BjB,EAAOgB,cAAcf,SAASiB,MAAML,OAE9BM,EAAanB,EAAOgB,cAAcf,SAASK,cAAc,WAE3Dc,EAAU,KACJC,EAASpB,SAASqB,iBAAiB,SACnCC,EAAQtB,SAASqB,iBAAiB,sBAExCD,EAAOzB,iBAAQH,OACLP,EAAOO,EAAMW,WAAU,GAC7Be,EAAWR,YAAYzB,KAG3BqC,EAAM3B,iBAAQ4B,OACJtC,EAAOsC,EAAKpB,WAAU,GAC5Be,EAAWR,YAAYzB,QAK3BuC,EAAajC,OAAS,GACtBiC,EAAa7B,iBAAQ8B,OACXF,EAAOvB,SAASC,cAAc,QACpCsB,EAAKG,aAAa,OAAQ,YAC1BH,EAAKG,aAAa,MAAO,cACzBH,EAAKG,aAAa,OAAQD,GAC1BP,EAAWR,YAAYa,KAK3BI,EAAU,KACJC,EAAkB5B,SAASC,cAAc,SAC/C2B,EAAgBd,UAAYa,EAC5BT,EAAWR,YAAYkB,MAIvBC,EAAc,KACRC,EAAoB9B,SAASC,cAAc,SACjD6B,EAAkBhB,UAAY,sCAC9BI,EAAWR,YAAYoB,GAG3B/B,EAAOgB,cAAcgB,QACrBhC,EAAOgB,cAAcf,SAASgC,aApF1BC,QAAQC,KAAK"}